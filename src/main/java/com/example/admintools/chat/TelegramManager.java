package com.example.admintools.chat;

import com.example.admintools.AdminToolsPlugin;
import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

public class TelegramManager { // <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£!
    
    private final AdminToolsPlugin plugin;
    private final String botToken;
    private final String chatId;
    private final String topicId;
    private int lastMessageId = 0;
    private boolean running = false;
    
    public TelegramManager(AdminToolsPlugin plugin) {
        this.plugin = plugin;
        FileConfiguration config = plugin.getConfigManager().getConfig();
        this.botToken = config.getString("telegram.bot-token");
        this.chatId = config.getString("telegram.chat-id");
        this.topicId = config.getString("telegram.topic-id", "434");
    }
    
    public void startBot() {
        running = true;
        startUpdateChecker();
        plugin.getLogger().info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–æ–ø–∏–∫: " + topicId);
    }
    
    public void stopBot() {
        running = false;
        plugin.getLogger().info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
    }
    
    public void sendToTelegram(String playerName, String message) {
        if (!running) return;
        
        String format = plugin.getConfigManager().getConfig().getString("formats.minecraft-to-telegram");
        String formattedMessage = format.replace("{player}", playerName).replace("{message}", message);
        
        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
            try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É–∫–∞–∑–∞–Ω–∏–µ–º topic_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É
                String urlString = String.format(
                    "https://api.telegram.org/bot%s/sendMessage?chat_id=%s&message_thread_id=%s&text=%s",
                    botToken,
                    chatId,
                    topicId,
                    URLEncoder.encode(formattedMessage, StandardCharsets.UTF_8)
                );
                
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                
                int responseCode = conn.getResponseCode();
                if (responseCode != 200) {
                    // –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    BufferedReader errorReader = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
                    StringBuilder errorResponse = new StringBuilder();
                    String errorLine;
                    while ((errorLine = errorReader.readLine()) != null) {
                        errorResponse.append(errorLine);
                    }
                    errorReader.close();
                    
                    plugin.getLogger().warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: " + responseCode);
                    plugin.getLogger().warning("–û—Ç–≤–µ—Ç –æ—à–∏–±–∫–∏: " + errorResponse.toString());
                } else {
                    plugin.getLogger().info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ " + topicId);
                }
                
                conn.disconnect();
            } catch (Exception e) {
                plugin.getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: " + e.getMessage());
                e.printStackTrace();
            }
        });
    }
    
    private void startUpdateChecker() {
        Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, () -> {
            if (!running) return;
            
            try {
                String urlString = String.format(
                    "https://api.telegram.org/bot%s/getUpdates?offset=%d",
                    botToken,
                    lastMessageId + 1
                );
                
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();
                
                processUpdates(response.toString());
                
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
            }
        }, 0L, 20L * plugin.getConfigManager().getConfig().getInt("telegram.update-interval", 2));
    }
    
    private void processUpdates(String jsonResponse) {
        if (!jsonResponse.contains("\"result\"")) return;
        
        String[] messages = jsonResponse.split("\"message\"");
        for (int i = 1; i < messages.length; i++) {
            try {
                String message = messages[i];
                
                // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                int messageId = Integer.parseInt(message.split("\"message_id\":")[1].split(",")[0].trim());
                if (messageId <= lastMessageId) continue;
                
                lastMessageId = messageId;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
                if (!message.contains("\"chat\":{\"id\":" + chatId)) continue;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã (topic)
                if (!message.contains("\"message_thread_id\":" + topicId)) {
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if (!message.contains("\"text\"")) continue;
                
                String text = message.split("\"text\":\"")[1].split("\"")[0];
                
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                text = decodeUnicode(text);
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
                if (text.startsWith("/") || text.contains("üéÆ")) {
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                String username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                if (message.contains("\"username\"")) {
                    username = message.split("\"username\":\"")[1].split("\"")[0];
                    username = decodeUnicode(username);
                } else if (message.contains("\"first_name\"")) {
                    username = message.split("\"first_name\":\"")[1].split("\"")[0];
                    username = decodeUnicode(username);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Minecraft
                final String finalUsername = username;
                final String finalText = text;
                
                Bukkit.getScheduler().runTask(plugin, () -> {
                    String format = plugin.getConfigManager().getConfig().getString("formats.telegram-to-minecraft");
                    String minecraftMessage = format.replace("{username}", finalUsername).replace("{message}", finalText);
                    
                    Bukkit.broadcastMessage(minecraftMessage.replace("&", "¬ß"));
                });
                
            } catch (Exception e) {
                plugin.getLogger().warning("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram: " + e.getMessage());
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    private String decodeUnicode(String unicodeString) {
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Unicode escape sequences (\u0430 -> "–∞")
            StringBuilder sb = new StringBuilder();
            int i = 0;
            while (i < unicodeString.length()) {
                if (unicodeString.charAt(i) == '\\' && i + 1 < unicodeString.length() && unicodeString.charAt(i + 1) == 'u') {
                    // –ù–∞—à–ª–∏ Unicode escape sequence
                    String hex = unicodeString.substring(i + 2, i + 6);
                    try {
                        int codePoint = Integer.parseInt(hex, 16);
                        sb.append((char) codePoint);
                        i += 6;
                    } catch (NumberFormatException e) {
                        sb.append(unicodeString.charAt(i));
                        i++;
                    }
                } else {
                    sb.append(unicodeString.charAt(i));
                    i++;
                }
            }
            return sb.toString();
        } catch (Exception e) {
            return unicodeString;
        }
    }
    
    public void debugChatInfo() {
        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
            try {
                String urlString = String.format(
                    "https://api.telegram.org/bot%s/getUpdates",
                    botToken
                );
                
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();
                
                plugin.getLogger().info("Debug response: " + response.toString());
                conn.disconnect();
                
            } catch (Exception e) {
                plugin.getLogger().warning("Debug error: " + e.getMessage());
            }
        });
    }
} // <-- –ò –≠–¢–ê –°–ö–û–ë–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í –ö–û–ù–¶–ï –§–ê–ô–õ–ê!
